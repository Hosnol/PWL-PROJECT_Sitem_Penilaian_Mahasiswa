name: kuis2 cloud
on:
  push:
    branches:
      - '*'
jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: 'Start build job'
        run: |
          echo "Starting the build job"

      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Login to Dockerhub'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 'Build and push'
        run: |
          docker build -f Docker/dockerfile/app.Dockerfile -t app .
          docker build -f Docker/dockerfile/web_server.Dockerfile -t web_server .
          docker tag app ${{ secrets.DOCKERHUB_USERNAME}}/penilaian-docker
          docker tag web_server ${{ secrets.DOCKERHUB_USERNAME}}/penilaian-web_server
          docker push ${{ secrets.DOCKERHUB_USERNAME}}/penilaian-docker
          docker push ${{ secrets.DOCKERHUB_USERNAME}}/penilaian-web_server

      - name: 'Write config'
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/oci_api_key.pem
          echo "${{secrets.OCI_KEY_PUBLIC}}" >> ~/.oci/oci_api_key_public.pem

      - name: 'Install OCI CLI'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL

      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/oci_api_key.pem

      - name: 'Check Existing Instance'
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance list \
            --lifecycle-state RUNNING \
            --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
            --display-name cicd-kuis \
            --query "data [0].id" \
            --raw-output \
            )" >> $GITHUB_ENV

      - name: 'Create Instance'
        if: ${{!env.INSTANCE_OCID}}
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance launch \
            -c ${{secrets.VM_COMPARTMENT_OCID}} \
            --availability-domain ${{secrets.VM_AVAILABILITY_DOMAIN}} \
            --shape ${{secrets.VM_SHAPE}} \
            --shape-config '{"memoryInGBs": 1, "ocpus": 1}' \
            --assign-public-ip true \
            --display-name cicd-kuis \
            --image-id ${{secrets.VM_CUSTOM_IMAGE_OCID}} \
            --ssh-authorized-keys-file /home/runner/.oci/oci_api_key_public.pem \
            --subnet-id ${{secrets.VM_SUBNET_OCID}} \
            --wait-for-state RUNNING \
            --query "data.id" \
            --raw-output \
            )" >> $GITHUB_ENV

      - name: 'Get Instance IP'
        run: |
          echo "INSTANCE_IP=$( \
            oci compute instance list-vnics \
            --instance-id ${{env.INSTANCE_OCID}} \
            --query 'data [0]."public-ip"' \
            --raw-output \
            )" >> $GITHUB_ENV
          echo Instance IP: ${{ env.INSTANCE_IP }}

      - name: 'Wait for SSH'
        run: |
          while ! nc -w5 -z ${{ env.INSTANCE_IP }} 22; do
          sleep 5
          echo "SSH not available..."
          done; echo "SSH ready!"

      - name: 'Deploy Deployment Configuration'
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.OCI_KEY_FILE }}
          source: "docker-compose.yml"
          target: "./"

      - name: 'Deploy project'
        uses: appleboy/ssh-action@master
        with:
          host: ${{env.INSTANCE_IP}}
          username: ubuntu
          key: ${{secrets.OCI_KEY_FILE}}
          script: |
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository \
              "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) \
              stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            sudo docker pull hosnol19/penilaian-docker
            sudo docker pull hosnol19/penilaian-web_server
            sudo curl -L "https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo docker-compose up -d
            sudo docker exec app /bin/bash -c "php artisan key:generate"
            sudo docker exec app /bin/bash -c "echo 'DB_CONNECTION=${{ secrets.DB_CONNECTION }}' >> .env"
            sudo docker exec app /bin/bash -c "echo 'DB_HOST=${{ secrets.DB_HOST }}' >> .env"
            sudo docker exec app /bin/bash -c "echo 'DB_PORT=${{ secrets.DB_PORT }}' >> .env"
            sudo docker exec app /bin/bash -c "echo 'DB_DATABASE=${{ secrets.DB_DATABASE }}' >> .env"
            sudo docker exec app /bin/bash -c "echo 'DB_USERNAME=${{ secrets.DB_USERNAME }}' >> .env"
            sudo docker exec app /bin/bash -c "echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> .env"
            sudo docker exec app /bin/bash -c "echo 'DB_REDIS=cache' >> .env"
            sudo apt-get install -y mysql-client-core-8.0
            mysql --user="${{ secrets.DB_USERNAME }}" --password="${{ secrets.DB_PASSWORD }}" --host="${{ secrets.DB_HOST }}"
            mysql>create database ${{ secrets.DB_DATABASE }};
            mysql>grant all privileges on ${{ secrets.DB_DATABASE }} to ${{ secrets.DB_USERNAME }};
            mysql>exit
            sudo docker exec app /bin/bash -c "php artisan config:clear"
            sudo docker exec app /bin/bash -c "php artisan migrate:fresh --seed"
            sudo docker exec app /bin/bash -c "php artisan storage:link"
